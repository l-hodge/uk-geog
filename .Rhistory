stop("Incorrect specification of argument 'geog', 'geog' accepts 'LA', 'GoR', 'NAT'")
}
url <- paste0("https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/",bound,"_December_",year,"_Boundaries_",tag,"_",type,"/MapServer/0/query?where=1%3D1&outFields=*&outSR=",sr,"&f=json")
sf <- st_read(url) %>%
mutate_if(is.factor, as.character) #%>%
# mutate(country = substr(ctyua19cd, 1, 1)) %>%
# filter(country %in% nations)
return(sf)
}
test <- get_sf("LA", nations = c("E"), type = "A", year = 2019)
test <- get_sf("LA", nations = c("E"), year = 2019)
get_sf <- function(geog,
year = 2019,
nations = c("E","S","W","N"),
type = "BGC"
){
sr <- 4326
#if (year < 2108 | year > 2019) stop("'year' must be either 2018 or 2019")
year <- year
if (type %in% c("BGC", "BFC", "BFE", "BUC")){
type <- type
} else{
stop("'type' must be one of BGC, BFC, BFE or BUC, see help(get_sf) for definitions")
}
if (geog == "LA") {
bound <- "Counties_and_Unitary_Authorities"
tag <- "UK"
} else if (geog == "GOR"){
bound <- "Regions"
tag <- "EN"
} else if (geog == "NAT"){
bound <- "Countries"
tag <- "UK"
} else{
stop("Incorrect specification of argument 'geog', 'geog' accepts 'LA', 'GoR', 'NAT'")
}
url <- paste0("https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/",bound,"_December_",year,"_Boundaries_",tag,"_",type,"/MapServer/0/query?where=1%3D1&outFields=*&outSR=",sr,"&f=json")
sf <- st_read(url) %>%
mutate_if(is.factor, as.character) #%>%
# mutate(country = substr(ctyua19cd, 1, 1)) %>%
# filter(country %in% nations)
return(sf)
}
test <- get_sf("LA", nations = c("E"), year = 2019)
get_sf <- function(geog,
year = 2019,
nations = c("E","S","W","N"),
type = "BGC"
){
sr <- 4326
if (year < 2108) stop("'year' must be either 2018 or 2019")
year <- year
if (type %in% c("BGC", "BFC", "BFE", "BUC")){
type <- type
} else{
stop("'type' must be one of BGC, BFC, BFE or BUC, see help(get_sf) for definitions")
}
if (geog == "LA") {
bound <- "Counties_and_Unitary_Authorities"
tag <- "UK"
} else if (geog == "GOR"){
bound <- "Regions"
tag <- "EN"
} else if (geog == "NAT"){
bound <- "Countries"
tag <- "UK"
} else{
stop("Incorrect specification of argument 'geog', 'geog' accepts 'LA', 'GoR', 'NAT'")
}
url <- paste0("https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/",bound,"_December_",year,"_Boundaries_",tag,"_",type,"/MapServer/0/query?where=1%3D1&outFields=*&outSR=",sr,"&f=json")
sf <- st_read(url) %>%
mutate_if(is.factor, as.character) #%>%
# mutate(country = substr(ctyua19cd, 1, 1)) %>%
# filter(country %in% nations)
return(sf)
}
test <- get_sf("LA", nations = c("E"), year = 2019)
get_sf <- function(geog,
year = 2019,
nations = c("E","S","W","N"),
type = "BGC"
){
sr <- 4326
if (year < 2108){
stop("'year' must be either 2018 or 2019")
}else{
year <- year
}
if (type %in% c("BGC", "BFC", "BFE", "BUC")){
type <- type
} else{
stop("'type' must be one of BGC, BFC, BFE or BUC, see help(get_sf) for definitions")
}
if (geog == "LA") {
bound <- "Counties_and_Unitary_Authorities"
tag <- "UK"
} else if (geog == "GOR"){
bound <- "Regions"
tag <- "EN"
} else if (geog == "NAT"){
bound <- "Countries"
tag <- "UK"
} else{
stop("Incorrect specification of argument 'geog', 'geog' accepts 'LA', 'GoR', 'NAT'")
}
url <- paste0("https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/",bound,"_December_",year,"_Boundaries_",tag,"_",type,"/MapServer/0/query?where=1%3D1&outFields=*&outSR=",sr,"&f=json")
sf <- st_read(url) %>%
mutate_if(is.factor, as.character) #%>%
# mutate(country = substr(ctyua19cd, 1, 1)) %>%
# filter(country %in% nations)
return(sf)
}
test <- get_sf("LA", nations = c("E"), year = 2019)
get_sf <- function(geog,
year = 2019,
nations = c("E","S","W","N"),
type = "BGC"
){
sr <- 4326
if (year < 2018 | year > 2019){
stop("'year' must be either 2018 or 2019")
}else{
year <- year
}
if (type %in% c("BGC", "BFC", "BFE", "BUC")){
type <- type
} else{
stop("'type' must be one of BGC, BFC, BFE or BUC, see help(get_sf) for definitions")
}
if (geog == "LA") {
bound <- "Counties_and_Unitary_Authorities"
tag <- "UK"
} else if (geog == "GOR"){
bound <- "Regions"
tag <- "EN"
} else if (geog == "NAT"){
bound <- "Countries"
tag <- "UK"
} else{
stop("Incorrect specification of argument 'geog', 'geog' accepts 'LA', 'GoR', 'NAT'")
}
url <- paste0("https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/",bound,"_December_",year,"_Boundaries_",tag,"_",type,"/MapServer/0/query?where=1%3D1&outFields=*&outSR=",sr,"&f=json")
sf <- st_read(url) %>%
mutate_if(is.factor, as.character) #%>%
# mutate(country = substr(ctyua19cd, 1, 1)) %>%
# filter(country %in% nations)
return(sf)
}
test <- get_sf("LA", nations = c("E"), year = 2019)
if (year < 2018 | year > 2019) stop("'year' must be either 2018 or 2019")
year <- 2020
if (year < 2018 | year > 2019) stop("'year' must be either 2018 or 2019")
rm(year)
get_sf <- function(geog,
year = 2019,
nations = c("E","S","W","N"),
type = "BGC"
){
sr <- 4326
if (year < 2018 | year > 2019) stop("'year' must be either 2018 or 2019")
year <- year
if (type %in% c("BGC", "BFC", "BFE", "BUC")){
type <- type
} else{
stop("'type' must be one of BGC, BFC, BFE or BUC, see help(get_sf) for definitions")
}
if (geog == "LA") {
bound <- "Counties_and_Unitary_Authorities"
tag <- "UK"
} else if (geog == "GOR"){
bound <- "Regions"
tag <- "EN"
} else if (geog == "NAT"){
bound <- "Countries"
tag <- "UK"
} else{
stop("Incorrect specification of argument 'geog', 'geog' accepts 'LA', 'GoR', 'NAT'")
}
url <- paste0("https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/",bound,"_December_",year,"_Boundaries_",tag,"_",type,"/MapServer/0/query?where=1%3D1&outFields=*&outSR=",sr,"&f=json")
sf <- st_read(url) %>%
mutate_if(is.factor, as.character) #%>%
# mutate(country = substr(ctyua19cd, 1, 1)) %>%
# filter(country %in% nations)
return(sf)
}
test <- get_sf("LA", nations = c("E"), year = 2019, type = "A")
test <- get_sf("COU")
test <- get_sf("NAT")
?str_sub
library(str)
library(stringr)
?str_sub
sf <- test
names(sf) <- str_sub(names(sf), start= -2)
sf <- test
names(sf) <- str_sub(names(sf)[,2:3], start= -2)
names(sf)
names(sf)[2,]
names(sf)[,2]
test <- names(sf)
test[2:3]
names(sf) <- c(names(sf)[1:1],
str_sub(names(sf)[2:3], start= -2),
name(sf)[4:])
names(sf) <- c(names(sf)[1:1],
str_sub(names(sf)[2:3], start= -2),
name(sf)[4:length(names(sf))])
names(sf) <- c(names(sf)[1:1],
str_sub(names(sf)[2:3], start= -2),
names(sf)[4:length(names(sf))])
get_sf <- function(geog,
year = 2019,
nations = c("E","S","W","N"),
type = "BGC"
){
sr <- 4326
if (year < 2018 | year > 2019) stop("'year' must be either 2018 or 2019")
year <- year
if (type %in% c("BGC", "BFC", "BFE", "BUC")){
type <- type
} else{
stop("'type' must be one of BGC, BFC, BFE or BUC, see help(get_sf) for definitions")
}
if (geog == "LA") {
bound <- "Counties_and_Unitary_Authorities"
tag <- "UK"
} else if (geog == "GOR"){
bound <- "Regions"
tag <- "EN"
} else if (geog == "NAT"){
bound <- "Countries"
tag <- "UK"
} else{
stop("Incorrect specification of argument 'geog', 'geog' accepts 'LA', 'GoR' or 'NAT'")
}
url <- paste0("https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/",bound,"_December_",year,"_Boundaries_",tag,"_",type,"/MapServer/0/query?where=1%3D1&outFields=*&outSR=",sr,"&f=json")
sf <- st_read(url)
names(sf) <- c(names(sf)[1:1],
str_sub(names(sf)[2:3], start= -2),
names(sf)[4:length(names(sf))])
sf <- mutate_if(is.factor, as.character) #%>%
mutate(country = substr(cd, 1, 1)) %>%
filter(country %in% nations)
return(sf)
}
test <- get_sf("LA", nations = c("E"))
get_sf <- function(geog,
year = 2019,
nations = c("E","S","W","N"),
type = "BGC"
){
sr <- 4326
if (year < 2018 | year > 2019) stop("'year' must be either 2018 or 2019")
year <- year
if (type %in% c("BGC", "BFC", "BFE", "BUC")){
type <- type
} else{
stop("'type' must be one of BGC, BFC, BFE or BUC, see help(get_sf) for definitions")
}
if (geog == "LA") {
bound <- "Counties_and_Unitary_Authorities"
tag <- "UK"
} else if (geog == "GOR"){
bound <- "Regions"
tag <- "EN"
} else if (geog == "NAT"){
bound <- "Countries"
tag <- "UK"
} else{
stop("Incorrect specification of argument 'geog', 'geog' accepts 'LA', 'GoR' or 'NAT'")
}
url <- paste0("https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/",bound,"_December_",year,"_Boundaries_",tag,"_",type,"/MapServer/0/query?where=1%3D1&outFields=*&outSR=",sr,"&f=json")
sf <- st_read(url)
names(sf) <- c(names(sf)[1:1],
str_sub(names(sf)[2:3], start= -2),
names(sf)[4:length(names(sf))])
sf <- sf %>%
mutate_if(is.factor, as.character) #%>%
mutate(country = substr(cd, 1, 1)) %>%
filter(country %in% nations)
return(sf)
}
test <- get_sf("LA", nations = c("E"))
get_sf <- function(geog,
year = 2019,
nations = c("E","S","W","N"),
type = "BGC"
){
sr <- 4326
if (year < 2018 | year > 2019) stop("'year' must be either 2018 or 2019")
year <- year
if (type %in% c("BGC", "BFC", "BFE", "BUC")){
type <- type
} else{
stop("'type' must be one of BGC, BFC, BFE or BUC, see help(get_sf) for definitions")
}
if (geog == "LA") {
bound <- "Counties_and_Unitary_Authorities"
tag <- "UK"
} else if (geog == "GOR"){
bound <- "Regions"
tag <- "EN"
} else if (geog == "NAT"){
bound <- "Countries"
tag <- "UK"
} else{
stop("Incorrect specification of argument 'geog', 'geog' accepts 'LA', 'GoR' or 'NAT'")
}
url <- paste0("https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/",bound,"_December_",year,"_Boundaries_",tag,"_",type,"/MapServer/0/query?where=1%3D1&outFields=*&outSR=",sr,"&f=json")
sf <- st_read(url)
names(sf) <- c(names(sf)[1:1],
str_sub(names(sf)[2:3], start= -2),
names(sf)[4:length(names(sf))])
# sf <- sf %>%
#       mutate_if(is.factor, as.character) #%>%
#       mutate(country = substr(cd, 1, 1)) %>%
#       filter(country %in% nations)
return(sf)
}
test <- get_sf("LA", nations = c("E"))
names(test)
get_sf <- function(geog,
year = 2019,
nations = c("E","S","W","N"),
type = "BGC"
){
sr <- 4326
if (year < 2018 | year > 2019) stop("'year' must be either 2018 or 2019")
year <- year
if (type %in% c("BGC", "BFC", "BFE", "BUC")){
type <- type
} else{
stop("'type' must be one of BGC, BFC, BFE or BUC, see help(get_sf) for definitions")
}
if (geog == "LA") {
bound <- "Counties_and_Unitary_Authorities"
tag <- "UK"
} else if (geog == "GOR"){
bound <- "Regions"
tag <- "EN"
} else if (geog == "NAT"){
bound <- "Countries"
tag <- "UK"
} else{
stop("Incorrect specification of argument 'geog', 'geog' accepts 'LA', 'GoR' or 'NAT'")
}
url <- paste0("https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/",bound,"_December_",year,"_Boundaries_",tag,"_",type,"/MapServer/0/query?where=1%3D1&outFields=*&outSR=",sr,"&f=json")
sf <- st_read(url)
names(sf) <- c(names(sf)[1:1],
str_sub(names(sf)[2:3], start= -2),
names(sf)[4:length(names(sf))])
sf <- sf %>%
mutate_if(is.factor, as.character) %>%
mutate(country = substr(cd, 1, 1)) %>%
filter(country %in% nations)
return(sf)
}
names(test)
test <- get_sf("LA", nations = c("E"))
rm(sf)
rm(test2)
rm(nations)
require(ggplot2)
library(testpackage)
?testpackage
test <- get_sf("LA", nations = c("E"))
test <- get_sf("UTLA", nations = c("E"))
library(sf)
test <- get_sf("UTLA", nations = c("E"))
require(stringr)
test <- get_sf("UTLA", nations = c("E"))
library(ukgeog)
remove.packages("testpackage", lib="~/R/win-library/3.6")
test <- get_sf("UTLA", nations = c("E"))
?mutate_if
?mutate_if
?dplyr::mutate_if
?mutate
?dplyr::mutate
?dplyr::filter
?names
library(ukgeog)
?names
?mutate_if
?dplyr::mutate_if
?read_sf
library(ukgeog)
library(ukgeog)
test <- get_sf("UTLA")
?get_sf
library(ukgeog)
test <- get_sf("UTLA")
library(ukgeog)
test <- get_sf("UTLA")
url <- paste0("https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/",bound,"_December_",year,"_Boundaries_",tag,"_",type,"/MapServer/0/query?where=1%3D1&outFields=*&outSR=",sr,"&f=json")
library(ukgeog)
test <- get_sf("UTLA")
library(ukgeog)
test <- get_sf("UTLA")
library(ukgeog)
test <- get_sf("UTLA")
devtools::use_package("dplyr")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::use_package("dplyr")
?devtools
?devtools::use_package
use_package("dplyr")
use_package("dplyr")
library(ukgeog)
get_sf("UTLA")
r
devtools::document()
devtools::document()
devtools::document()
devtools::document()
typeof(test)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(ukgeog)
devtools::check()
devtools::document()
library(ukgeog)
?substr
devtools::document()
devtools::document()
devtools::document()
devtools::use_testthat()
?devtools::use_testthat
library(devtools)
?devtools::use_testthat
use_testthat()
use_test()
library(ukgeog)
library(ukgeog)
test <- get_sf("GOR")
library(ukgeog)
test <- get_sf("GOR")
library(ukgeog)
test <- get_sf("GOR")
library(ukgeog)
library(ukgeog)
test <- get_sf("GOR")
rm(test)
test <- get_sf("GOR")
?installr::updateR()
installr::updateR()
installr::updateR()
install.packages(c("dplyr", "sf", "stringr"))
library(ukgeog)
library(ukgeog)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
library(ukgeog)
install.packages("testthat")
install.packages("devtools")
library(ukgeog)
devtools::document()
devtools::document()
devtools::document()
library(ukgeog)
library(testthat)
library(devtools)
devtools::check(NOT_CRAN = FALSE)
?check
devtools::check(env_vars = c(NOT_CRAN = "FALSE"))
install.packages("pkgdown")
usethis::use_pkgdown()
pkgdown::build_site()
#' @importFrom attempt stop_if_not
#' @importFrom curl has_internet
check_internet <- function(){
stop_if_not(.x = has_internet(), msg = "Please check your internet connection")
}
check_internet()
install.packages("curl")
curl::has_internet
curl::has_internet()
library(ukgeog)
library(devtools)
devtools::document()
pkgdown::build_site()
library(ukgeog)
get_sf("NAT", crs = 3035)
get_sf("NAT", crs = 32629 )
get_sf("NAT", crs = 6923)
get_sf("NAT", crs = 27700)
get_sf("NAT")
library(ukgeog)
library(ukgeog)
get_sf("NAT", crs = 6923)
?askYesNo
library(ukgeog)
get_sf("NAT", crs = 6923)
get_sf("NAT", crs = 6923)
library(ukgeog)
library(ukgeog)
get_sf("NAT", crs = 6923)
get_sf("NAT", crs = 6923)
library(ukgeog)
devtools::document()
get_sf("NAT")
get_sf("NAT")
library(ukgeog)
library(ukgeog)
get_sf("NAT")
devtools::document()
devtools::document()
